version: "3"

services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: ZOOKKEPER
    restart: always
    ports:
      - 2181:218
    network_mode: host

  kafka:
    image: wurstmeister/kafka
    container_name: KAFKA
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ADVERTISED_HOST_NAME: debian
      KAFKA_ZOOKEEPER_CONNECT: debian:2181
      KAFKA_CREATE_TOPICS: "records:1:1,alerts:1:1"
    network_mode: host

  mongodb :
    container_name: MONGO
    image : mongo:latest
    volumes:
    - ./mongodb:/data/db
    ports :
       - "27017:27017"
    environment:
      - "MONGO_INITDB_DATABASE=prestacop"
    network_mode: host

  drones:
    build: drones/
    container_name: DRONES
    depends_on:
      - kafka
    command: sbt "run conf/configuration.json"
    network_mode: host

  spark-master:
    image: bde2020/spark-master:2.4.5-hadoop2.7
    container_name: SPARKMASTER
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    network_mode: host

  spark-worker-1:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: SPARKWORKER1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://debian:7077"
    network_mode: host

  spark-worker-2:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: SPARKWORKER2
    depends_on:
      - spark-master
    ports:
      - "8082:8082"
    environment:
      - "SPARK_MASTER=spark://debian:7077"
    network_mode: host

  spark-worker-3:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: SPARKWORKER3
    depends_on:
      - spark-master
    ports:
      - "8083:8083"
    environment:
      - "SPARK_MASTER=spark://debian:7077"
    network_mode: host

  spark-worker-4:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: SPARKWORKER4
    depends_on:
      - spark-master
    ports:
      - "8084:8084"
    environment:
      - "SPARK_MASTER=spark://debian:7077"
    network_mode: host

  record-manager:
    build: recordManager
    container_name: RECORDMANAGER
    depends_on:
      - drones
    ports:
      - "8085:8085"
    environment:
      - ENABLE_INIT_DAEMON=false
    network_mode: host
    command: sh submit.sh

#  alert-manager:
#    build: alertManager
#    container_name: ALERTMANAGER
#    depends_on:
#      - drones
#    volumes:
#    - ./alertManager/output/img/:/output/img
#    ports:
#      - "8086:8086"
#    environment:
#      - ENABLE_INIT_DAEMON=false
#    network_mode: host
#    command: sh submit.sh

volumes:
  mongodb:

